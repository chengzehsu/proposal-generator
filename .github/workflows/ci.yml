name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: proposal_generator_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build shared package
        run: npm run build:shared

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/proposal_generator_test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: |
          cd backend
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/proposal_generator_test

      - name: Run backend tests
        run: npm run test:backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/proposal_generator_test
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Run shared tests
        run: npm run test:shared

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          fail_ci_if_error: false

  deploy:
    name: Deploy to Zeabur
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install all dependencies
        run: npm ci --legacy-peer-deps

      - name: Build shared package
        run: npm run build:shared

      - name: Build backend
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://localhost:5432/proposal_generator' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'fallback-secret-for-build' }}
        run: npm run build:backend

      - name: Skip frontend build (temporary)
        run: echo "⚠️  前端建構暫時跳過，專注於後端部署"

      - name: Deploy to Zeabur
        run: |
          echo "🚀 Zeabur 自動部署已觸發"
          echo "📋 GitHub 推送到 main 分支會自動觸發 Zeabur 部署"
          echo "🌐 部署將在 proposal-generator.zeabur.app 上線"
          echo "⏳ 請在 Zeabur dashboard 查看部署進度"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to proposal-generator.zeabur.app successful!"
          else
            echo "❌ Deployment failed!"
          fi